{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2719b75c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Purchased</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15624510</td>\n",
       "      <td>Male</td>\n",
       "      <td>19</td>\n",
       "      <td>19000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15810944</td>\n",
       "      <td>Male</td>\n",
       "      <td>35</td>\n",
       "      <td>20000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15668575</td>\n",
       "      <td>Female</td>\n",
       "      <td>26</td>\n",
       "      <td>43000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15603246</td>\n",
       "      <td>Female</td>\n",
       "      <td>27</td>\n",
       "      <td>57000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>15804002</td>\n",
       "      <td>Male</td>\n",
       "      <td>19</td>\n",
       "      <td>76000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    User ID  Gender  Age  EstimatedSalary  Purchased\n",
       "0  15624510    Male   19            19000          0\n",
       "1  15810944    Male   35            20000          0\n",
       "2  15668575  Female   26            43000          0\n",
       "3  15603246  Female   27            57000          0\n",
       "4  15804002    Male   19            76000          0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "file = pd.read_csv(\"Social_Network_Ads.csv\")\n",
    "df = pd.DataFrame(file)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9d9de4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Purchased', ylabel='count'>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "sns.countplot(x = df.Purchased)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9f0fad09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(400, 5)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a90a94fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Gender', ylabel='count'>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# changing string values in column Gender into binary ones\n",
    "\n",
    "df[\"Gender\"] = df[\"Gender\"].map({\"Female\": 1, \"Male\": 0})\n",
    "sns.countplot(x = df.Gender)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "14430ef8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# age distribution\n",
    "\n",
    "n, bins, patches = plt.hist(x=df[\"Age\"], bins='auto', color='#0504aa',alpha=0.7, rwidth=0.85)\n",
    "\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "plt.axvline(df[\"Age\"].mean(), color='k', linestyle='dashed', linewidth=1)\n",
    "min_ylim, max_ylim = plt.ylim()\n",
    "plt.text(df[\"Age\"].mean()*1.1, max_ylim*0.9, 'Mean: {:.2f}'.format(df[\"Age\"].mean()))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6dcd8d3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "X = df[[\"Gender\", \"Age\", \"EstimatedSalary\"]]\n",
    "y = df[\"Purchased\"]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=40)\n",
    "logreg = LogisticRegression(random_state=16, max_iter=200)\n",
    "\n",
    "logreg.fit(X_train, y_train)\n",
    "\n",
    "y_pred = logreg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "829756b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[66,  0],\n",
       "       [34,  0]], dtype=int64)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "cnf_matrix = metrics.confusion_matrix(y_test, y_pred)\n",
    "cnf_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "49c557ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 257.44, 'Predicted label')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "class_names=[0,1] # name  of classes\n",
    "fig, ax = plt.subplots()\n",
    "tick_marks = np.arange(len(class_names))\n",
    "plt.xticks(tick_marks, class_names)\n",
    "plt.yticks(tick_marks, class_names)\n",
    "# create heatmap\n",
    "sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\n",
    "ax.xaxis.set_label_position(\"top\")\n",
    "plt.tight_layout()\n",
    "plt.title('Confusion matrix', y=1.1)\n",
    "plt.ylabel('Actual label')\n",
    "plt.xlabel('Predicted label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f8131ebf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      " no purchase       0.66      1.00      0.80        66\n",
      "   purchased       0.00      0.00      0.00        34\n",
      "\n",
      "    accuracy                           0.66       100\n",
      "   macro avg       0.33      0.50      0.40       100\n",
      "weighted avg       0.44      0.66      0.52       100\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Larysa\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\Larysa\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\Larysa\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "\n",
    "target_names = ['no purchase', 'purchased']\n",
    "print(classification_report(y_test, y_pred, target_names=target_names))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "66629458",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training accuracy: 0.64, test accuracy: 0.66\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "test_accuracy = logreg.fit(X_train, y_train).score(X_test, y_test).round(2)\n",
    "training_accuracy = accuracy_score(y_train,logreg.fit(X_train, y_train).predict(X_train)).round(2)\n",
    "\n",
    "print(f\"Training accuracy: {training_accuracy}, test accuracy: {test_accuracy}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "10967fb3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred_proba = logreg.predict_proba(X_test)[::,1]\n",
    "fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\n",
    "auc = metrics.roc_auc_score(y_test, y_pred_proba)\n",
    "plt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\n",
    "plt.legend(loc=4)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "f6b0d586",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-7.68620433e-11, -2.24543603e-09, -1.97730430e-06])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg.coef_[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "88d5677f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "col_names = df[[\"Gender\", \"Age\", \"EstimatedSalary\"]]\n",
    "plt.bar(range(len(logreg.coef_[0])), logreg.coef_[0])\n",
    "plt.xticks(range(len(logreg.coef_[0])), col_names[:-2], rotation=90)\n",
    "plt.title(\"Linear Regression Coefficients\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c988120",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
